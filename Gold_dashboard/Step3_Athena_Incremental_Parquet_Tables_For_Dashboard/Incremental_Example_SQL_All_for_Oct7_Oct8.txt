=====================================================================================
-- Dashboard 1--  add only 10/07 and 10/08  ----- dt
=====================================================================================

INSERT INTO marketing_data.daily_bookings_by_channel
SELECT
  "channel"                              AS channel,
  COUNT(DISTINCT booking_id)             AS bookings,
  DATE(dt)                               AS booking_date
FROM marketing_data.calendly_events
WHERE "channel" IS NOT NULL AND trim("channel") <> ''
  AND DATE(dt) BETWEEN DATE '2025-10-07' AND DATE '2025-10-08'
GROUP BY "channel", DATE(dt);

--- verify ----

SELECT *
FROM marketing_data.daily_bookings_by_channel
WHERE booking_date BETWEEN DATE '2025-10-07' AND DATE '2025-10-08'
ORDER BY booking_date, channel;

=====================================================================================
----- Dashboard 2 -------------------------------
---  drop table because no partition here.
--- 1. drop 
--- 2. delete the s3://dea-calendly-data/gold/cpb_by_channel/
--- 3. re-create
======================================================================================




--DROP TABLE marketing_data.daily_bookings_by_channel;

-- Drop the physical s3://dea-calendly-data/gold/cpb_by_channel/



CREATE TABLE marketing_data.cpb_by_channel
WITH (
  format = 'PARQUET',
  external_location = 's3://dea-calendly-data/gold/cpb_by_channel/'
) AS
WITH bookings AS (
  SELECT
    "channel" AS channel,
    COUNT(DISTINCT booking_id) AS bookings
  FROM "AwsDataCatalog"."marketing_data"."calendly_events"
  WHERE "channel" IS NOT NULL AND TRIM("channel") <> ''
  GROUP BY "channel"
),
spend AS (
  SELECT
    "channel" AS channel,
    CAST(SUM(CAST(spend AS DOUBLE)) AS DOUBLE) AS channel_cost
  FROM "AwsDataCatalog"."marketing_data"."events_spend"
  WHERE "channel" IS NOT NULL AND TRIM("channel") <> ''
  GROUP BY "channel"
)
SELECT
  b.channel,
  s.channel_cost                      AS total_spend,
  b.bookings                          AS total_bookings,
  ROUND(s.channel_cost / NULLIF(b.bookings, 0), 2) AS cpb
FROM bookings b
JOIN spend s ON b.channel = s.channel;


=========================================================================================================================
====  Dashboard 3 -- incremental -- option 1 -- calcuate start at the last partition date 10/6 because it is accumulated
==========================================================================================================================

INSERT INTO marketing_data.cumulative_bookings_by_source_daily_dt
SELECT
  d.source,
  d.bookings,
  (
    COALESCE(
      (
        SELECT c.cumulative_bookings
        FROM marketing_data.cumulative_bookings_by_source_daily_dt c
        WHERE c.source = d.source
          AND c.dt < DATE '2025-10-07'
        ORDER BY c.dt DESC
        LIMIT 1
      ),
0
    )
    + SUM(d.bookings) OVER (
        PARTITION BY d.source
        ORDER BY d.dt
        ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
      )
  ) AS cumulative_bookings,
  d.dt                                  -- partition column LAST
FROM (
  SELECT
    "channel"                  AS source,
    DATE(dt)                   AS dt,
    COUNT(DISTINCT booking_id) AS bookings
  FROM marketing_data.calendly_events
  WHERE "channel" IS NOT NULL AND TRIM("channel") <> ''
    AND DATE(dt) BETWEEN DATE '2025-10-07' AND DATE '2025-10-08'
  GROUP BY "channel", DATE(dt)
) d
ORDER BY d.dt, d.source;


SELECT dt, source, cumulative_bookings
FROM marketing_data.cumulative_bookings_by_source_daily_dt
ORDER BY dt, source;


================================================================================================
=== Incremental for Dashboard 4 -- insert only 10/7 and 10/8
================================================================================================

INSERT INTO marketing_data.channel_campaign_daily_dt
WITH ev AS (
  SELECT DATE(dt) AS dt, "channel" AS source, NULLIF(TRIM(utm_campaign), '') AS campaign, booking_id
  FROM marketing_data.calendly_events
  WHERE "channel" IS NOT NULL AND TRIM("channel") <> ''
    AND DATE(dt) BETWEEN DATE '2025-10-07' AND DATE '2025-10-08'
),
bk AS (
  SELECT dt, source, campaign, COUNT(DISTINCT booking_id) AS bookings
  FROM ev
  GROUP BY dt, source, campaign
),
bk_ch AS (
  SELECT dt, source, COUNT(DISTINCT booking_id) AS bookings_channel
  FROM ev
  GROUP BY dt, source
),
sp_ch AS (
  SELECT DATE(dt) AS dt, "channel" AS source,
         SUM(TRY_CAST(spend AS DOUBLE)) AS spend_channel
  FROM marketing_data.events_spend
  WHERE "channel" IS NOT NULL AND TRIM("channel") <> ''
    AND DATE(dt) BETWEEN DATE '2025-10-07' AND DATE '2025-10-08'
  GROUP BY DATE(dt), "channel"
),
alloc AS (
  SELECT
    bk.dt,
    bk.source,
    COALESCE(bk.campaign, '(none)') AS campaign,
    bk.bookings                     AS total_bookings,
    CASE WHEN bk_ch.bookings_channel > 0
         THEN COALESCE(sp_ch.spend_channel, 0) * (bk.bookings / bk_ch.bookings_channel)
         ELSE 0 END                 AS total_spend
  FROM bk
  JOIN bk_ch  ON bk.dt = bk_ch.dt  AND bk.source = bk_ch.source
  LEFT JOIN sp_ch ON sp_ch.dt = bk.dt AND sp_ch.source = bk.source
)
SELECT
  source,
  campaign,
  total_bookings,
  total_spend,
  ROUND(CASE WHEN total_bookings > 0 THEN total_spend/total_bookings END, 2) AS cpb,
  dt  -- << partition column LAST
FROM alloc;



============================================================================================

--- Dashbaord 5
--------------------------------------------------------------------------------------------

INSERT INTO marketing_data.booking_time_features
  (source, booking_id, hour_of_day, dow_num, dow_name, booking_date_local)
SELECT
  t.source,
  t.booking_id,
  hour(t.ts_local)                    AS hour_of_day,
  day_of_week(t.ts_local)             AS dow_num,
  format_datetime(t.ts_local, 'EEE')  AS dow_name,
  CAST(t.ts_local AS DATE)            AS booking_date_local  -- keep last if table is partitioned by this
FROM (
  SELECT
    "channel" AS source,
    booking_id,
    at_timezone(                       -- convert to America/New_York
      COALESCE(booking_created_at, webhook_received_at),
      'America/New_York'
    ) AS ts_local
  FROM marketing_data.calendly_events
  WHERE "channel" IS NOT NULL AND TRIM("channel") <> ''
    AND DATE(dt) BETWEEN DATE '2025-10-07' AND DATE '2025-10-08'
) t
WHERE t.ts_local IS NOT NULL;



==============================================================================================

Weekly Incremental, for example, 2025-10-06- 10-13
==============================================================================================


-- add two new weeks: 2025-10-06 and 2025-10-13 (Athena weeks start on Monday)
INSERT INTO marketing_data.employee_meetings_features
SELECT
  employee_id,
  meeting_id,
  CAST(start_local AS DATE)                              AS meeting_date,
  CAST(date_trunc('week', start_local) AS DATE)          AS week_start_date -- partition col LAST
FROM (
  SELECT
    "organizer_email"                                        AS employee_id,
    scheduled_event_id                                       AS meeting_id,
    (scheduled_event_start AT TIME ZONE 'America/New_York')  AS start_local,
    COALESCE(invitee_status, '')                             AS invitee_status
  FROM marketing_data.calendly_events
  WHERE "organizer_email" IS NOT NULL AND TRIM("organizer_email") <> ''
) base
WHERE invitee_status NOT IN ('canceled','cancelled')
  AND date_trunc('week', start_local) IN (TIMESTAMP '2025-10-06 00:00:00', TIMESTAMP '2025-10-13 00:00:00');


